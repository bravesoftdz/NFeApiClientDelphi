unit NFeAPI;

interface
uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs, ComCtrls, StdCtrls, IdHTTP, IdIOHandler, IdIOHandlerSocket, IdIOHandlerStack,
  IdSSL, IdSSLOpenSSL, ShellApi, IdCoderMIME, EncdDecd;

//Assinatura das funções
function enviaConteudoParaAPI(token: String; conteudo:TStringStream; url:String; tpConteudo:String):String;
function emitirNFe(token, conteudo, tpConteudo: String): String;
function consultarStatusProcessamento(token, CNPJ, nsNRec: String): String;
function downloadNFe(token, chNFe, tpDown:String): String;
function downloadNFeAndSave(token, chNFe, tpDown: String; caminho:String = ''; exibeNaTela: boolean = false): String;
function salvaXML(retorno, caminho, chNFe: String): String;
function salvaJSON(retorno, caminho, chNFe: String): String;
function salvaPDF(retorno, caminho, chNFe: String): String;

implementation

//Implementar as funções descritas na interface


  //Função genérica de envio para um url, contendo o token no header
  function enviaConteudoParaAPI(token: String; conteudo:TStringStream; url:String; tpConteudo:String): String;
  var
    retorno: String;
    HTTP: TIdHTTP;  //Disponível na aba 'Indy Servers'
    IdSSLIOHandlerSocketOpenSSL1: TIdSSLIOHandlerSocketOpenSSL; //Disponivel na aba Indy I/O Handlers
  begin
    HTTP := TIdHTTP.Create(nil);
    try
      if tpConteudo = 'txt' then  //Informa que vai mandar um TXT
      begin
        HTTP.Request.ContentType := 'text/plain';
      end
      else if tpConteudo = 'xml' then	//Se for XML
      begin
        HTTP.Request.ContentType := 'application/xml';
      end
      else  //JSON
      begin
        HTTP.Request.ContentType := 'application/json';
      end;

      //Abre SSL
      IdSSLIOHandlerSocketOpenSSL1 := TIdSSLIOHandlerSocketOpenSSL.Create(nil);
      HTTP.IOHandler := IdSSLIOHandlerSocketOpenSSL1;

      //Avisa o uso de UTF-8
      HTTP.Request.ContentEncoding := 'UTF-8';

      //Adiciona o token ao header
      HTTP.Request.CustomHeaders.Values['X-AUTH-TOKEN'] := token;

      //Faz o envio por POST do json para a url
      try
        retorno := HTTP.Post(url, conteudo);

      except
        on E:EIdHTTPProtocolException do
          retorno :=  e.ErrorMessage;
        on E:Exception do
          retorno := E.message;
      end;

    finally
      conteudo.Free();
      HTTP.Free();
    end;

    //Devolve o json de retorno da API
    Result := retorno;
  end;

  //Envia NFe
  function emitirNFe(token, conteudo, tpConteudo: String): String;
  var
    conteudoEnviar: TStringStream;
    urlEnvio, retorno: String;
  begin
    conteudoEnviar := TStringStream.Create(UTF8Encode(conteudo));
    //Informa a url para onde deve ser enviado
    urlEnvio :=  'https://nfe.ns.eti.br/nfe/issue';

    retorno := enviaConteudoParaAPI(token, conteudoEnviar, urlEnvio, tpConteudo);
    Result := retorno;
  end;

  //Consulta status de processamento do NFe
  function consultarStatusProcessamento(token, CNPJ, nsNRec: String): String;
  var
    json: TStringStream;
    urlEnvio, retorno: String;
  begin
    //Monta o Json
    json := TStringStream.Create('{' +
			'"X-AUTH-TOKEN": "' + token + '",' +
			'"CNPJ": "' + CNPJ + '",' +
			'"nsNRec": "' + nsNRec + '"' +
		'}');

    //Informa a url para onde deve ser enviado
    urlEnvio := 'https://nfe.ns.eti.br/nfe/issue/status';

    //Envia o json para a url
    retorno := enviaConteudoParaAPI(token, json, urlEnvio, 'json');

    //Devolve o retorno da API
    Result := retorno;
  end;

  function downloadNFe(token, chNFe, tpDown:String): String;
  var
    json: TStringStream;
    urlEnvio, retorno: String;
  begin
  //Monta o Json
    json := TStringStream.Create('{' +
			'"X-AUTH-TOKEN": "' + token + '",' +
			'"chNFe": "' + chNFe + '",' +
			'"tpDown": "' + tpDown + '"' +
		'}');

    //Informa a url para onde deve ser enviado
    urlEnvio := 'https://nfe.ns.eti.br/nfe/get';

    //Envia o json para a url
    retorno := enviaConteudoParaAPI(token, json, urlEnvio, 'json');
    Result := retorno;
  end;

  //Download de NFe
  function downloadNFeAndSave(token, chNFe, tpDown: String; caminho:String = ''; exibeNaTela: boolean = false): String;
  var
    baixarXML, baixarPDF, baixarJSON: boolean;
    status, retorno: String;
  begin
    retorno := downloadNFe(token, chNFe, tpDown);
    //Pega o status de retorno da requisição
    status := Copy(retorno, Pos('"status": ', retorno) + 11, 3);

    if not DirectoryExists(caminho) then
      CreateDir(caminho);

    //Checa o que baixar com base no tpDown informado
    if Pos('X', tpDown) <> 0 then
      baixarXML := true;
    if Pos('P', tpDown) <> 0 then
      baixarPDF := true;
    if Pos('J', tpDown) <> 0 then
      baixarJSON := true;

    //Se o retorno da API for positivo, salva o que foi solicitado
    if status = '200' then
    begin
      //Checa se deve baixar XML
      if baixarXML = true then
        salvaXML(retorno, caminho, chNFe);

      //Checa se deve baixar JSON
      if baixarJSON = true then
        //Se não baixou XML, baixa JSON
        if baixarXML <> true then
          salvaJSON(retorno, caminho, chNFe);

      //Checa se deve baixar PDF
      if baixarPDF = true then
        salvaPDF(retorno, caminho, chNFe);
        //Caso tenha sido marcada a opção de de exibir em tela, abre o PDF salvo
        if exibeNaTela then
          ShellExecute(0, nil, PChar(caminho + chNFe + '-NFe.pdf'), nil, nil, SW_SHOWNORMAL);
    end
    else
    begin
      Showmessage('Ocorreu um erro, veja o Retorno da API para mais informações');
    end;

    //Devolve o retorno da API
    Result := retorno;
  end;

  //Função para salvar o XML de retorno
  function salvaXML(retorno, caminho, chNFe: String): String;
  var
    arquivo: TextFile;
    inicioRetorno, finalRetorno: Integer;
    conteudoSalvar, localParaSalvar: String;
  begin
    //Seta o caminho para o arquivo XML
    localParaSalvar := caminho + chNFe + '-NFe.xml';

    //Associa o arquivo ao caminho
    AssignFile(arquivo, localParaSalvar);
    //Abre para escrita o arquivo
    Rewrite(arquivo);

    //Separa o retorno
    inicioRetorno := Pos('"xml":"<', retorno) + 7;
    finalRetorno := Pos('/nfeProc>', retorno) + 9;

    //Copia o retorno
    conteudoSalvar := Copy(retorno, inicioRetorno, finalRetorno - inicioRetorno);
    //Ajeita o XML retirando as barras antes das aspas duplas
    conteudoSalvar := StringReplace(conteudoSalvar, '\"', '"', [rfReplaceAll, rfIgnoreCase]);

    //Escreve o retorno no arquivo
    Writeln(arquivo, conteudoSalvar);

    //Fecha o arquivo
    CloseFile(arquivo);
  end;


  //Função para salvar o JSON de retorno
  function salvaJSON(retorno, caminho, chNFe: String): String;
  var
    arquivo: TextFile;
    inicioRetorno, finalRetorno: Integer;
    conteudoSalvar, localParaSalvar: String;
  begin
    //Seta o caminho para o arquivo JSON
    localParaSalvar := caminho + chNFe + '-NFe.json';

    //Associa o arquivo ao caminho
    AssignFile(arquivo, localParaSalvar);
    //Abre para escrita o arquivo
    Rewrite(arquivo);

    //Separa o retorno
    inicioRetorno := Pos('"nfeProc":', retorno) + 10;

    //Checa se no retorno existe base64 de PDF
    if(Pos('"pdf":"', retorno) > 0) then
    begin
      //Se existir, o json vai até onde começa a tag de pdf
      finalRetorno := Pos('"pdf":"', retorno) - 1;
    end
    else
    begin
      //Se não existir, o json vai até o final
      finalRetorno := Length(retorno);
    end;

    //Copia o retorno
    conteudoSalvar := Copy(retorno, inicioRetorno, finalRetorno - inicioRetorno);

    //Escreve o retorno no arquivo
    Writeln(arquivo, conteudoSalvar);

    //Fecha o arquivo
    CloseFile(arquivo);
  end;


  //Função para salvar o PDF de retorno
  function salvaPDF(retorno, caminho, chNFe: String): String;
  var
    inicioRetorno, finalRetorno: Integer;
    conteudoSalvar, localParaSalvar: String;
    base64decodificado: TStringStream;
    arquivo: TFileStream;
  begin
    ////Seta o caminho para o arquivo PDF
    localParaSalvar := caminho + chNFe + '-NFe.pdf';

    //Separa o base64
    inicioRetorno := Pos('"pdf":"', retorno) + 7;
    finalRetorno := Length(retorno);

    //Copia e cria uma TString com o base64
    conteudoSalvar := Copy(retorno, inicioRetorno, finalRetorno - inicioRetorno);
    base64decodificado := TStringStream.Create(conteudoSalvar);

    //Cria o arquivo .pdf e decodifica o base64 para o arquivo
    try
      arquivo := TFileStream.Create(localParaSalvar, fmCreate);
      try
        DecodeStream(base64decodificado, arquivo);
      finally
        arquivo.Free;
      end;
    finally
      base64decodificado.Free;
    end;
  end;
end.
